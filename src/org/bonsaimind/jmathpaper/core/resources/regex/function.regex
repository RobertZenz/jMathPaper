#
# Copyright 2017, Robert 'Bobby' Zenz
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# Regular Expression for finding a function definition and expression.
#
# Matched samples:
#   func(a, b, c)=a+b+c
#
# The ID will be in the ID group, the parameters in the PARAMETER group and
# the expression in the EXPRESSION group.


^					# Start of string.
(?<ID>				# Start of the ID group.
	[a-zA-Z_]		# ID must start with a letter or underscore.
	[a-zA-Z_0-9]*	# But can be continued with numbers.
)
\s*					# Accept any number of whitespace.
\(					# Parentheses for the parameter list.
(?<PARAMETERS>		# Group for the parameters.
	# Now we match the parameters that follow.
	# The rules for what constitutes a valid parameter name are the same as for
	# for the ID of the function itself.
	\s*
	[a-zA-Z_]
	[a-zA-Z_0-9]*
	\s*
	
	# Now match any more parameters.
	(
		,
		\s*
		[a-zA-Z_]
		[a-zA-Z_0-9]*
		\s*
	)*
)?
\)
\s*
=					# The expected equals sign.
(?<EXPRESSION>		# Start of the EXPRESSION group.
	[^=]+			# Make sure that the next character is not an equals sign,
					# that is to make sure that we not accidently match
					# a boolean operation.
	.*				# But otherwise we take everything.
)
$					# End of string.