jMathPaper
==========

A simple and easy to use calculation application, which works similar to taking
notes on a sheet of paper.

![A screenshot of the main view.](./screenshots/01-main-view.png)


License
-------

jMathPaper is licensed under GPLv3.


Dependencies
------------

Please see the attached license files for details.

 * [EvalEx](https://github.com/uklimaschewski/EvalEx/), BSD-like
 * [jline3](https://github.com/jline/jline3), BSD-like
 * [Lanterna](https://github.com/mabe02/lanterna), LGPLv3
 * [picocli](https://github.com/remkop/picocli), Apache 2.0
 * [SWT](https://www.eclipse.org/swt/), Eclipse Public License 1.0


Usage
-----

### Basics

When you start jMathPaper you are greeted with a (currently empty) list of
previous expressions and the input box to enter a new one. You can enter any
expression you want to evaluate. Additionally, there is a larger input are to
the right which allows you to take notes.

You can save and load papers from the menu, they are stored in a very simple
cleartext format, so it is easy to create and edit them without jMathPaper.
Examples can be found in the examples directory.

Let us start with something simple and enter a few simple expressions:

    ID                               Expression Result
    --------------------------------------------------
    #1                                       1+1 =   2
    #2                                       5*5 =  25
    #3                                    239-38 = 201

One of the big features of jMathPaper is that you can easily reference
a previous result by using its ID, like this:

    #1                                       1+1 =   2
    #2                                       5*5 =  25
    #3                                    239-38 = 201
    #4                                     #2*25 = 625

We can also define variables which we can reference:

    #1                                       1+1 =   2
    #2                                       5*5 =  25
    #3                                    239-38 = 201
    #4                                     #2*25 = 625
    length                             length=10 =  10
    width                                width=5 =   5
    area                       area=length*width =  50

Now if we made a mistake, for example the width really is 7, we can simply press
up and down to scroll through the history and execute the corrected expression
again. The previously executed expressions do not change, so we need to evaluate
them again:

    #1                                       1+1 =   2
    #2                                       5*5 =  25
    #3                                    239-38 = 201
    #4                                     #2*25 = 625
    length                             length=10 =  10
    width                                width=5 =   5
    area                       area=length*width =  50
    width                                width=7 =   7
    area                       area=length*width =  70

We can also use mathematical functions, like `sin`:

    #1                                   sin(70) = 0.9396926

See the documentation of [EvalEx](https://github.com/uklimaschewski/EvalEx/blob/master/README.md)
to see what functions are supported.

### Variables

jMathPaper allows to store results in variables by prefixing the expression with
the name of the variable and an equals sign:

    width                                width=5 =   5

The variable names must begin with either a lower- or uppercase letter or
an underscore, and can contain any letter, underscores or numbers. 

### Different base

We can also enter numbers in hex, octal or binary:

    hex                                 hex=0xff = 255
    octal                             octal=0o77 =  63
    binary                           binary=0b11 =   3

### Comments

If there is need to comment lines or parts of equations C style comments can be
used:

    #10       // We can also comment whole lines. =   0
    #11           1+1 // Or lines with equations. =   2
    #12    1 + /* Or inlined commenting. */ 1 + 1 =   3

### Booleans

Support for booleans is built right in, internally true and false are treated
as zero and one.

    comparison                   comparison= 1==1 = true
    boolean      boolean= (true || false) && true = true

The following operations are supported:

    Operation    Description                          Aliases
    --------------------------------------------------------------------
    ==           equals                               equal, equals
    !=           not equals                           notequal, notequals
    >            greater                              greater
    >=           greater equals                       greaterequal,
                                                      greaterequals
    <            less                                 less
    <=           less equals                          lessequal, lessequals
    &&           and                                  and
    ||           or                                   or

These aliases should be treated as reserved words, but are only replace when
surrounded by spaces, example:

    aliases                  aliases= true and false = false
    aliases                   aliases= true or false =  true

### Different UIs

jMathPaper supports three main mode of operations:

 1. CLI, only processing arguments given.
 2. TUI, a simple text interface.
 3. SWT, a GUI based on SWT.

By default with no arguments given the SWT UI is started, if an expression is
given the CLI UI will be used instead.

One can also force one UI to use by specifying `-t` as argument and one of
the following values:

 * `c` or `cli`
 * `t` or `tui`
 * `s` or `swt`

### Commands

There are also commands which can be used to control the application, they can
be entered instead of expressions:

    Command     Description                           Aliases
    --------------------------------------------------------------------
    clean       Cleans the current paper, removing    clean, clear
                all expressions from it.
    
    close       Closes the current paper.             close, :bdelete,
                                                      :bd
    
    new         Creates a new paper.                  new, :new
    
    next        Switches to the next paper in         next, right,
                the list, if there is any.            :bnext, :bn
    
    open       Opens a paper from the given path.     open, :e
               The path to open the files is expected
               as argument to this command.
    
    previous   Switches to the previous paper in      previous, left,
               the list, if there is any.             :bprevious, :bp
    
    quit       Quits the application.                 quit, exit, :q,
                                                      :q!
    
    reload    Reloads the current paper, effectively  reload, reset
              undoing all changes.
    
    save      Saves the current paper, the location   save, store, :w
              can be given as argument.
    
    save/quit Saves the current paper and quits,      :x
              the location can be given as argument.

### Chaining

Expressions and commands can be chained by using a semicolon (`;`). So
the following input:

    1+1;2+3;5+5;a=5;a+5

Turns into this:

   #1                                         1+1 =  2
   #2                                         2+3 =  5
   #3                                         5+5 = 10
   a                                          a=5 =  5
   #4                                         a+5 = 10

Of course one can also chain commands and expressions.


Technical information
---------------------

jMathPaper is a Java 8 application which uses SWT and EvalEx.

The save format is a simple plaintext format, with UTF-8 as encoding and UNIX
line endings. Everything from the start of the file to the first empty line is
treated as expression, everything below the first empty line is treated as note.
